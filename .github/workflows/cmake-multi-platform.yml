# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: 'CMake on multiple platforms'
on:
  workflow_dispatch:
  # push:
  #   branches: [ "complite" ]
jobs:      
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
  
  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false 
      
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]  
        build_type: [Release]
        include:
        - os: ubuntu-latest
          c_compiler: gcc
          cpp_compiler: g++
        - os: macos-latest
          c_compiler: clang
          cpp_compiler: clang++
        - os: windows-latest
          c_compiler: cl
          cpp_compiler: cl 
          
    steps:
    - uses: actions/checkout@v4  
        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

###########################   Ubuntu   #########################################################

    - name: Set up cache for Boost (Ubuntu and macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/cache@v4
      with:
        path: ~/boost
        key: ${{ runner.os }}-boost-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-boost-
  
    - name: Install Boost (Ubuntu)
      id: install-boost-ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ ! -d "$HOME/boost/include" ]; then
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev          
          mkdir -p $HOME/boost/include          
          mkdir -p $HOME/boost/cmake
          cp -r /usr/include/boost $HOME/boost/include
          cp -r /usr/lib/x86_64-linux-gnu/libboost* $HOME/boost/
          cp -r /usr/lib/x86_64-linux-gnu/cmake/* $HOME/boost/cmake
        else
          echo "Boost is cached"
        fi

    - name: Configure CMake Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo ln -s $HOME/boost/include /home/include
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_PREFIX_PATH=$HOME/boost \
              -DBOOST_ROOT=$HOME/boost \
              -DBoost_INCLUDE_DIR=$HOME/boost/include \
              -DBoost_LIBRARIES=$HOME/boost/ \
              -DBoost_DIR=$HOME/boost/cmake/Boost-1.74.0 \
              -S ${{ github.workspace }}/source

###########################   macOS   #########################################################

    - name: Install Boost (macOS)
      id: install-boost-macos
      if: matrix.os == 'macos-latest'
      run: |
       if [ ! -d "$HOME/boost/include" ]; then
            brew update
            brew install boost
            mkdir -p $HOME/boost/include
            mkdir -p $HOME/boost/lib
            mkdir -p $HOME/boost/lib/cmake
            cp -r /opt/homebrew/include/boost $HOME/boost/include || true
            cp -r /opt/homebrew/lib/libboost* $HOME/boost/lib || true
            cp -r /opt/homebrew/lib/cmake/* $HOME/boost/lib/cmake/ || true
        else
          echo "Boost is cached"
        fi
    
    - name: Configure CMake macOS
      if: matrix.os == 'macos-latest'
      run: |        
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}/source

###########################   Windows   #########################################################

    - name: Set up cache for Boost (Windows)
      id: setup-boost-cache-windows
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: C:\Users\runneradmin\boost
        key: ${{ runner.os }}-boost-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-boost-   

    - name: Install Boost (Windows)
      id: install-boost-windows
      if: matrix.os == 'windows-latest' && steps.setup-boost-cache-windows.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Install vcpkg
        git clone https://github.com/microsoft/vcpkg.git $env:USERPROFILE/vcpkg
        & "$env:USERPROFILE/vcpkg/bootstrap-vcpkg.bat"
        
        # Install Boost
        & "$env:USERPROFILE/vcpkg/vcpkg.exe" install boost-filesystem:x64-windows-static boost-iostreams:x64-windows-static boost-crc:x64-windows-static boost-uuid:x64-windows-static boost-container:x64-windows-static boost-program-options:x64-windows-static

        # Create cache directories
        New-Item -ItemType Directory -Force -Path "C:\Users\runneradmin\boost"

        # Copy Boost to cache
        Copy-Item -Recurse -Force "$env:USERPROFILE\vcpkg\installed\x64-windows-static\*" "C:\Users\runneradmin\boost"
    
        # Set environment variables for the current GitHub Actions workflow
        echo "BOOST_ROOT=C:\Users\runneradmin\boost" >> $env:GITHUB_ENV
        echo "PATH=C:\Users\runneradmin\boost\;$env:PATH" >> $env:GITHUB_ENV
        echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $env:GITHUB_ENV          
          
    - name: Configure CMake Windows
      if: ${{matrix.os == 'windows-latest' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_FLAGS_RELEASE="/MT" 
        -DCMAKE_C_FLAGS_RELEASE="/MT"
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH=${{ env.BOOST_ROOT }}
        -S ${{ github.workspace }}/source

    
###########################   Build   #########################################################    
      
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      
###########################   Test  Ubuntu  #########################################################     
    - name: Test
      run: ${{ steps.strings.outputs.build-output-dir }}/bayan --scan-dirs ${{ github.workspace }}/source --scan-level 1 --file-masks .h .cpp --exclude-dirs ${{ github.workspace }}/source/exclude
      if: matrix.os == 'ubuntu-latest' 
      
###########################   Upload Release   #########################################################

    - name: Upload Release Asset Ubuntu
      if: ${{ success() && matrix.os == 'ubuntu-latest' }}    
      id: upload-release-asset-ubuntu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/bayan
        asset_name: bayan-${{ matrix.os }}-0.0.${{ github.run_number }}
        asset_content_type: application/vnd.debian.binary-package
    
    - name: Upload Release Asset Windows
      if: ${{ success() && matrix.os == 'windows-latest' }}
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/Release/bayan.exe
        asset_name: bayan-${{ matrix.os }}-0.0.${{ github.run_number }}.exe
        asset_content_type: application/x-msdownload
        
    - name: Upload Release Asset MacOS
      if: ${{ success() && matrix.os == 'macos-latest' }}     
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/bayan
        asset_name: bayan-${{ matrix.os }}-0.0.${{ github.run_number }}
        asset_content_type: application/octet-stream
